// Generated by CoffeeScript 1.12.7
(function() {
  var deepEqual, inherit, renderAttributes;

  deepEqual = require('assert').deepEqual;

  inherit = require('./inherit');

  module.exports = renderAttributes = function(root, dataStructures) {
    var attributes, exclusive, i, item, items, j, k, key, len, len1, len2, m, member, option, optionSchema, prop, properties, reducedItems, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, required, typeAttr;
    attributes = {
      values: [],
      properties: []
    };
    switch (root.element) {
      case 'boolean':
      case 'string':
      case 'number':
        attributes.type = root.element;
        if (((ref1 = root.attributes) != null ? ref1["default"] : void 0) != null) {
          attributes["default"] = root.attributes["default"];
        }
        break;
      case 'enum':
        attributes.values = [];
        attributes.type = 'string';
        ref2 = root.content || [];
        for (j = 0, len = ref2.length; j < len; j++) {
          item = ref2[j];
          attributes.values.push(item.content);
        }
        break;
      case 'array':
        attributes.type = 'array';
        items = [];
        ref3 = root.content || [];
        for (k = 0, len1 = ref3.length; k < len1; k++) {
          item = ref3[k];
          items.push(renderAttributes(item, dataStructures));
        }
        try {
          reducedItems = items.reduce(function(l, r) {
            return deepEqual(l, r) || r;
          });
        } catch (error) {
          reducedItems = {
            'anyOf': items
          };
        }
        try {
          attributes.type = "Array (" + reducedItems.type + ")";
          attributes.properties = reducedItems.properties;
        } catch (error) {
          attributes.type = "Array (" + reducedItems[0].type + ")";
          attributes.properties = reducedItems[0].properties;
        }
        break;
      case 'object':
      case 'option':
        attributes.type = 'object';
        attributes.properties = [];
        required = [];
        properties = root.content.slice(0);
        i = 0;
        while (i < properties.length) {
          member = properties[i];
          i++;
          if (member.element === 'ref') {
            ref = dataStructures[member.content.href];
            i--;
            properties.splice.apply(properties, [i, 1].concat(ref.content));
            continue;
          } else if (member.element === 'select') {
            exclusive = [];
            ref4 = member.content;
            for (m = 0, len2 = ref4.length; m < len2; m++) {
              option = ref4[m];
              optionSchema = renderAttributes(option, dataStructures);
              ref5 = optionSchema.properties;
              for (key in ref5) {
                prop = ref5[key];
                exclusive.push(key);
                prop.name = key;
                attributes.properties.push(prop);
              }
            }
            if (!attributes.allOf) {
              attributes.allOf = [];
            }
            attributes.allOf.push({
              not: {
                required: exclusive
              }
            });
            continue;
          }
          attributes.type = member.content.value.element;
          prop = renderAttributes(member.content.value, dataStructures);
          prop.name = member.content.key.content;
          if (((ref6 = member.meta) != null ? ref6.description : void 0) != null) {
            prop.description = member.meta.description;
          }
          if ((ref7 = member.attributes) != null ? ref7.typeAttributes : void 0) {
            typeAttr = member.attributes.typeAttributes;
            prop.required = typeAttr.indexOf('required') === -1 ? false : true;
            if (typeAttr.indexOf('nullable') !== -1) {
              prop.type = [prop.type, 'null'];
            }
          }
          attributes.properties.push(prop);
        }
        if (required.length) {
          attributes.required = required;
        }
        break;
      default:
        ref = dataStructures[root.element];
        if (ref) {
          attributes = renderAttributes(inherit(ref, root), dataStructures);
          attributes.type = root.element;
        }
    }
    if (((ref8 = root.meta) != null ? ref8.description : void 0) != null) {
      attributes.description = root.meta.description;
    }
    if ((ref9 = root.attributes) != null ? ref9.typeAttributes : void 0) {
      typeAttr = root.attributes.typeAttributes;
      if (typeAttr.indexOf('nullable') !== -1) {
        attributes.type = [attributes.type, 'null'];
      }
    }
    return attributes;
  };

}).call(this);

// Generated by CoffeeScript 1.12.7
(function() {
  var ROOT, benchmark, cache, compileTemplate, crypto, decorate, equal, errMsg, fs, getActions, getApiDescription, getCached, getCss, getDataStructures, getDefaultResourceGroup, getExamples, getHeaders, getHost, getMetadata, getParameters, getRequest, getRequestMethod, getResource, getResourceDescription, getResourceGroup, getResourceGroups, getResources, getResponse, getTemplate, getTitle, highlight, hljs, isEmptyMessage, jade, less, markdownIt, modifyUriTemplate, moment, path, query, querystring, renderAttributes, renderExample, renderSchema, sha1, slug;

  crypto = require('crypto');

  fs = require('fs');

  hljs = require('highlight.js');

  jade = require('jade');

  less = require('less');

  markdownIt = require('markdown-it');

  moment = require('moment');

  path = require('path');

  querystring = require('querystring');

  equal = require('deep-equal');

  query = require('@gasolwu/refract-query');

  renderExample = require('./example');

  renderSchema = require('./schema');

  renderAttributes = require('./attribute');

  ROOT = path.dirname(__dirname);

  cache = {};

  benchmark = {
    start: function(message) {
      if (process.env.BENCHMARK) {
        return console.time(message);
      }
    },
    end: function(message) {
      if (process.env.BENCHMARK) {
        return console.timeEnd(message);
      }
    }
  };

  errMsg = function(message, err) {
    err.message = message + ": " + err.message;
    return err;
  };

  sha1 = function(value) {
    return crypto.createHash('sha1').update(value.toString()).digest('hex');
  };

  slug = function(cache, value, unique) {
    var sluggified;
    if (cache == null) {
      cache = {};
    }
    if (value == null) {
      value = '';
    }
    if (unique == null) {
      unique = false;
    }
    sluggified = value.toLowerCase().replace(/[ \t\n\\<>"'=:\/]/g, '-').replace(/-+/g, '-').replace(/^-/, '');
    if (unique) {
      while (cache[sluggified]) {
        if (sluggified.match(/\d+$/)) {
          sluggified = sluggified.replace(/\d+$/, function(value) {
            return parseInt(value) + 1;
          });
        } else {
          sluggified = sluggified + '-1';
        }
      }
    }
    cache[sluggified] = true;
    return sluggified;
  };

  highlight = function(code, lang, subset) {
    var response;
    benchmark.start("highlight " + lang);
    response = (function() {
      switch (lang) {
        case 'no-highlight':
          return code;
        case void 0:
        case null:
        case '':
          return hljs.highlightAuto(code, subset).value;
        default:
          return hljs.highlight(lang, code).value;
      }
    })();
    benchmark.end("highlight " + lang);
    return response.trim();
  };

  getCached = function(key, compiledPath, sources, load, done) {
    var compiledStats, err, i, len, loadErr, source, sourceStats;
    if (process.env.NOCACHE) {
      return done(null);
    }
    if (cache[key]) {
      return done(null, cache[key]);
    }
    try {
      if (fs.existsSync(compiledPath)) {
        compiledStats = fs.statSync(compiledPath);
        for (i = 0, len = sources.length; i < len; i++) {
          source = sources[i];
          sourceStats = fs.statSync(source);
          if (sourceStats.mtime > compiledStats.mtime) {
            return done(null);
          }
        }
        try {
          return load(compiledPath, function(err, item) {
            if (err) {
              return done(errMsg('Error loading cached resource', err));
            }
            cache[key] = item;
            return done(null, cache[key]);
          });
        } catch (error) {
          loadErr = error;
          return done(errMsg('Error loading cached resource', loadErr));
        }
      } else {
        return done(null);
      }
    } catch (error) {
      err = error;
      return done(err);
    }
  };

  getCss = function(variables, styles, verbose, done) {
    var compiledPath, customPath, defaultVariablePath, i, item, j, key, len, len1, load, sources, stylePaths, variablePaths;
    key = "css-" + variables + "-" + styles;
    if (cache[key]) {
      return done(null, cache[key]);
    }
    compiledPath = path.join(ROOT, 'cache', (sha1(key)) + ".css");
    defaultVariablePath = path.join(ROOT, 'styles', 'variables-default.less');
    sources = [defaultVariablePath];
    if (!Array.isArray(variables)) {
      variables = [variables];
    }
    if (!Array.isArray(styles)) {
      styles = [styles];
    }
    variablePaths = [defaultVariablePath];
    for (i = 0, len = variables.length; i < len; i++) {
      item = variables[i];
      if (item !== 'default') {
        customPath = path.join(ROOT, 'styles', "variables-" + item + ".less");
        if (!fs.existsSync(customPath)) {
          customPath = item;
          if (!fs.existsSync(customPath)) {
            return done(new Error(customPath + " does not exist!"));
          }
        }
        variablePaths.push(customPath);
        sources.push(customPath);
      }
    }
    stylePaths = [];
    for (j = 0, len1 = styles.length; j < len1; j++) {
      item = styles[j];
      customPath = path.join(ROOT, 'styles', "layout-" + item + ".less");
      if (!fs.existsSync(customPath)) {
        customPath = item;
        if (!fs.existsSync(customPath)) {
          return done(new Error(customPath + " does not exist!"));
        }
      }
      stylePaths.push(customPath);
      sources.push(customPath);
    }
    load = function(filename, loadDone) {
      return fs.readFile(filename, 'utf-8', loadDone);
    };
    if (verbose) {
      console.log("Using variables " + variablePaths);
      console.log("Using styles " + stylePaths);
      console.log("Checking cache " + compiledPath);
    }
    return getCached(key, compiledPath, sources, load, function(err, css) {
      var k, l, len2, len3, tmp;
      if (err) {
        return done(err);
      }
      if (css) {
        if (verbose) {
          console.log('Cached version loaded');
        }
        return done(null, css);
      }
      if (verbose) {
        console.log('Not cached or out of date. Generating CSS...');
      }
      tmp = '';
      for (k = 0, len2 = variablePaths.length; k < len2; k++) {
        customPath = variablePaths[k];
        tmp += "@import \"" + customPath + "\";\n";
      }
      for (l = 0, len3 = stylePaths.length; l < len3; l++) {
        customPath = stylePaths[l];
        tmp += "@import \"" + customPath + "\";\n";
      }
      benchmark.start('less-compile');
      return less.render(tmp, {
        compress: true
      }, function(err, result) {
        var writeErr;
        if (err) {
          return done(msgErr('Error processing LESS -> CSS', err));
        }
        try {
          css = result.css;
          fs.writeFileSync(compiledPath, css, 'utf-8');
        } catch (error) {
          writeErr = error;
          return done(errMsg('Error writing cached CSS to file', writeErr));
        }
        benchmark.end('less-compile');
        cache[key] = css;
        return done(null, cache[key]);
      });
    });
  };

  compileTemplate = function(filename, options) {
    var compiled;
    return compiled = "var jade = require('jade/runtime');\n" + (jade.compileFileClient(filename, options)) + "\nmodule.exports = compiledFunc;";
  };

  getTemplate = function(name, verbose, done) {
    var builtin, compiledPath, key, load;
    builtin = path.join(ROOT, 'templates', name + ".jade");
    if (!fs.existsSync(name) && fs.existsSync(builtin)) {
      name = builtin;
    }
    key = "template-" + name;
    if (cache[key]) {
      return done(null, cache[key]);
    }
    compiledPath = path.join(ROOT, 'cache', (sha1(key)) + ".js");
    load = function(filename, loadDone) {
      var loadErr, loaded;
      try {
        loaded = require(filename);
      } catch (error) {
        loadErr = error;
        return loadDone(errMsg('Unable to load template', loadErr));
      }
      return loadDone(null, require(filename));
    };
    if (verbose) {
      console.log("Using template " + name);
      console.log("Checking cache " + compiledPath);
    }
    return getCached(key, compiledPath, [name], load, function(err, template) {
      var compileErr, compileOptions, compiled, writeErr;
      if (err) {
        return done(err);
      }
      if (template) {
        if (verbose) {
          console.log('Cached version loaded');
        }
        return done(null, template);
      }
      if (verbose) {
        console.log('Not cached or out of date. Generating template JS...');
      }
      benchmark.start('jade-compile');
      compileOptions = {
        filename: name,
        name: 'compiledFunc',
        self: true,
        compileDebug: false
      };
      try {
        compiled = compileTemplate(name, compileOptions);
      } catch (error) {
        compileErr = error;
        return done(errMsg('Error compiling template', compileErr));
      }
      if (compiled.indexOf('self.') === -1) {
        compileOptions.self = false;
        try {
          compiled = compileTemplate(name, compileOptions);
        } catch (error) {
          compileErr = error;
          return done(errMsg('Error compiling template', compileErr));
        }
      }
      try {
        fs.writeFileSync(compiledPath, compiled, 'utf-8');
      } catch (error) {
        writeErr = error;
        return done(errMsg('Error writing cached template file', writeErr));
      }
      benchmark.end('jade-compile');
      cache[key] = require(compiledPath);
      return done(null, cache[key]);
    });
  };

  modifyUriTemplate = function(templateUri, parameters, colorize) {
    var block, closeIndex, index, lastIndex, param, parameterBlocks, parameterNames, parameterSet, parameterValidator;
    parameterValidator = function(b) {
      return parameterNames.indexOf(querystring.unescape(b.replace(/^\*|\*$/, ''))) !== -1;
    };
    parameterNames = (function() {
      var i, len, results1;
      results1 = [];
      for (i = 0, len = parameters.length; i < len; i++) {
        param = parameters[i];
        results1.push(param.name);
      }
      return results1;
    })();
    parameterBlocks = [];
    lastIndex = index = 0;
    while ((index = templateUri.indexOf("{", index)) !== -1) {
      parameterBlocks.push(templateUri.substring(lastIndex, index));
      block = {};
      closeIndex = templateUri.indexOf("}", index);
      block.querySet = templateUri.indexOf("{?", index) === index;
      block.formSet = templateUri.indexOf("{&", index) === index;
      block.reservedSet = templateUri.indexOf("{+", index) === index;
      lastIndex = closeIndex + 1;
      index++;
      if (block.querySet || block.formSet || block.reservedSet) {
        index++;
      }
      parameterSet = templateUri.substring(index, closeIndex);
      block.parameters = parameterSet.split(",").filter(parameterValidator);
      if (block.parameters.length) {
        parameterBlocks.push(block);
      }
    }
    parameterBlocks.push(templateUri.substring(lastIndex, templateUri.length));
    return parameterBlocks.reduce(function(uri, v) {
      var segment;
      if (typeof v === "string") {
        uri.push(v);
      } else {
        segment = !colorize ? ["{"] : [];
        if (v.querySet) {
          segment.push("?");
        }
        if (v.formSet) {
          segment.push("&");
        }
        if (v.reservedSet && !colorize) {
          segment.push("+");
        }
        segment.push(v.parameters.map(function(name) {
          if (!colorize) {
            return name;
          } else {
            name = name.replace(/^\*|\*$/, '');
            param = parameters[parameterNames.indexOf(querystring.unescape(name))];
            if (v.querySet || v.formSet) {
              return ("<span class=\"hljs-attribute\">" + name + "=</span>") + ("<span class=\"hljs-literal\">" + (param.example || '') + "</span>");
            } else {
              return "<span class=\"hljs-attribute\" title=\"" + name + "\">" + (param.example || name) + "</span>";
            }
          }
        }).join(colorize ? '&' : ','));
        if (!colorize) {
          segment.push("}");
        }
        uri.push(segment.join(""));
      }
      return uri;
    }, []).join('').replace(/\/+/g, '/').replace(/\/$/, '');
  };

  getTitle = function(parseResult) {
    var category, ref, ref1;
    ref = query(parseResult, {
      element: 'category',
      meta: {
        classes: {
          content: [
            {
              content: 'api'
            }
          ]
        }
      }
    }), category = ref[0];
    return (category != null ? (ref1 = category.meta.title) != null ? ref1.content : void 0 : void 0) || '';
  };

  getMetadata = function(parseResult) {
    var category, meta, ref;
    ref = query(parseResult, {
      element: 'category',
      meta: {
        classes: {
          content: [
            {
              content: 'api'
            }
          ]
        }
      }
    }), category = ref[0];
    return (function() {
      var i, len, ref1, ref2, ref3, results1;
      ref3 = (category != null ? (ref1 = category.attributes) != null ? (ref2 = ref1.metadata) != null ? ref2.content : void 0 : void 0 : void 0) || [];
      results1 = [];
      for (i = 0, len = ref3.length; i < len; i++) {
        meta = ref3[i];
        results1.push({
          name: meta.content.key.content,
          value: meta.content.value.content
        });
      }
      return results1;
    })();
  };

  getDataStructures = function(parseResult) {
    var results;
    results = query(parseResult, {
      element: 'dataStructure',
      content: {
        meta: {
          id: {
            element: 'string'
          }
        }
      }
    });
    return new function() {
      var i, len, result;
      for (i = 0, len = results.length; i < len; i++) {
        result = results[i];
        this[result.content.meta.id.content] = result;
      }
      return this;
    };
  };

  getApiDescription = function(parseResult) {
    var category, content, ref;
    ref = query(parseResult, {
      element: 'category',
      meta: {
        classes: {
          content: [
            {
              content: 'api'
            }
          ]
        }
      }
    }), category = ref[0];
    if ((category != null ? category.content.length : void 0) > 0) {
      content = category.content[0];
      if (content.element === 'copy') {
        return content.content;
      }
    }
    return '';
  };

  getHost = function(parseResult) {
    var category, member, ref, ref1, ref2;
    ref = query(parseResult, {
      element: 'category',
      meta: {
        classes: {
          content: [
            {
              content: 'api'
            }
          ]
        }
      }
    }), category = ref[0];
    ref2 = query((category != null ? (ref1 = category.attributes) != null ? ref1.metadata : void 0 : void 0) || [], {
      element: 'member',
      content: {
        key: {
          content: 'HOST'
        }
      }
    }), member = ref2[0];
    return (member != null ? member.content.value.content : void 0) || '';
  };

  getResourceGroups = function(parseResult, slugCache, md) {
    var result, results;
    results = query(parseResult, {
      element: 'category',
      meta: {
        classes: {
          content: [
            {
              content: 'resourceGroup'
            }
          ]
        }
      }
    });
    return (function() {
      var i, len, results1;
      results1 = [];
      for (i = 0, len = results.length; i < len; i++) {
        result = results[i];
        results1.push(getResourceGroup(result, slugCache, md));
      }
      return results1;
    })();
  };

  getResourceGroup = function(resourceGroupElement, slugCache, md) {
    var description, resourceElements, resourceGroup, slugify, title, title_slug;
    slugify = slug.bind(slug, slugCache);
    title = resourceGroupElement.meta.title.content;
    title_slug = slugify(title, true);
    if (resourceGroupElement.content.length > 0 && resourceGroupElement.content[0].element === 'copy') {
      description = md.render(resourceGroupElement.content[0].content);
    }
    resourceGroup = {
      name: title,
      elementId: title_slug,
      elementLink: "#" + title_slug,
      descriptionHtml: description || '',
      resources: []
    };
    if (description) {
      resourceGroup.navItems = slugCache._nav;
      slugCache._nav = [];
    }
    resourceElements = query(resourceGroupElement, {
      element: 'resource'
    });
    resourceGroup.resources = getResources(resourceElements, slugCache, resourceGroup.elementId);
    return resourceGroup;
  };

  getResources = function(resourceElements, slugCache, parentId) {
    var resourceElement;
    return (function() {
      var i, len, results1;
      results1 = [];
      for (i = 0, len = resourceElements.length; i < len; i++) {
        resourceElement = resourceElements[i];
        results1.push(getResource(resourceElement, slugCache, parentId));
      }
      return results1;
    })();
  };

  getResourceDescription = function(resourceElement) {
    var ref;
    if (((ref = resourceElement.content[0]) != null ? ref.element : void 0) === 'copy') {
      return resourceElement.content[0].content;
    }
    return '';
  };

  getResource = function(resourceElement, slugCache, parentId) {
    var description, ref, resource, slugify, title, title_slug;
    slugify = slug.bind(slug, slugCache);
    title = resourceElement.meta.title.content;
    title_slug = slugify(parentId + "-" + title, true);
    description = getResourceDescription(resourceElement);
    resource = {
      name: title,
      elementId: title_slug,
      elementLink: "#" + title_slug,
      description: description,
      actions: [],
      uriTemplate: ((ref = resourceElement.attributes) != null ? ref.href.content : void 0) || ""
    };
    resource.actions = getActions(resourceElement, slugCache, parentId + "-" + title + "-" + resource.name);
    return resource;
  };

  getHeaders = function(headersElement) {
    var element;
    return (function() {
      var i, len, ref, results1;
      ref = headersElement || [];
      results1 = [];
      for (i = 0, len = ref.length; i < len; i++) {
        element = ref[i];
        results1.push({
          name: element.content.key.content,
          value: element.content.value.content
        });
      }
      return results1;
    })();
  };

  getRequest = function(requestElement) {
    var body, copy, hasRequest, headers, method, name, ref, ref1, ref2, schema;
    hasRequest = ((ref = requestElement.meta) != null ? ref.title : void 0) || requestElement.content.length > 0;
    name = (ref1 = requestElement.meta) != null ? ref1.title.content : void 0;
    method = requestElement.attributes.method.content;
    copy = query(requestElement, {
      element: 'copy'
    })[0];
    schema = query(requestElement, {
      element: 'asset',
      meta: {
        classes: {
          content: [
            {
              content: 'messageBodySchema'
            }
          ]
        }
      }
    })[0];
    body = query(requestElement, {
      element: 'asset',
      meta: {
        classes: {
          content: [
            {
              content: 'messageBody'
            }
          ]
        }
      }
    })[0];
    headers = getHeaders((ref2 = requestElement.attributes.headers) != null ? ref2.content : void 0);
    return {
      name: name || '',
      description: (copy != null ? copy.content : void 0) || '',
      schema: (schema != null ? schema.content : void 0) || '',
      body: (body != null ? body.content : void 0) || '',
      headers: headers,
      content: [],
      method: method,
      hasContent: ((copy != null ? copy.content : void 0) != null) || headers.length > 0 || ((body != null ? body.content : void 0) != null) || ((schema != null ? schema.content : void 0) != null)
    };
  };

  getResponse = function(responseElement) {
    var body, copy, headers, name, ref, schema;
    name = responseElement.attributes.statusCode.content;
    schema = query(responseElement, {
      element: 'asset',
      meta: {
        classes: {
          content: [
            {
              content: 'messageBodySchema'
            }
          ]
        }
      }
    })[0];
    body = query(responseElement, {
      element: 'asset',
      meta: {
        classes: {
          content: [
            {
              content: 'messageBody'
            }
          ]
        }
      }
    })[0];
    copy = query(responseElement, {
      element: 'copy'
    })[0];
    headers = getHeaders((ref = responseElement.attributes.headers) != null ? ref.content : void 0);
    return {
      name: name || '',
      description: (copy != null ? copy.content : void 0) || '',
      headers: headers,
      body: (body != null ? body.content : void 0) || '',
      schema: (schema != null ? schema.content : void 0) || '',
      content: [],
      hasContent: ((copy != null ? copy.content : void 0) != null) || headers.length > 0 || ((body != null ? body.content : void 0) != null) || ((schema != null ? schema.content : void 0) != null)
    };
  };

  isEmptyMessage = function(message) {
    return (message.name != null) && message.headers.length === 0 && (message.description != null) && (message.body != null) && (message.schema != null) && message.content.length === 0;
  };

  getExamples = function(actionElement) {
    var example, examples, httpTransaction, i, j, k, len, len1, len2, method, prevRequest, prevResponse, ref, ref1, ref2, ref3, ref4, request, requestElement, response, responseElement, sameRequest, sameResponse;
    example = {
      name: '',
      description: '',
      requests: [],
      responses: []
    };
    examples = [example];
    ref = query(actionElement, {
      element: 'httpTransaction'
    });
    for (i = 0, len = ref.length; i < len; i++) {
      httpTransaction = ref[i];
      ref1 = query(httpTransaction, {
        element: 'httpRequest'
      });
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        requestElement = ref1[j];
        request = getRequest(requestElement);
        method = request.method;
      }
      ref2 = query(httpTransaction, {
        element: 'httpResponse'
      });
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        responseElement = ref2[k];
        response = getResponse(responseElement);
      }
      ref3 = (example != null ? example.requests : void 0) || [], prevRequest = ref3[ref3.length - 1];
      ref4 = (example != null ? example.responses : void 0) || [], prevResponse = ref4[ref4.length - 1];
      sameRequest = equal(prevRequest, request);
      sameResponse = equal(prevResponse, response);
      if (sameRequest) {
        if (!sameResponse) {
          example.responses.push(response);
        }
      } else {
        if (prevRequest) {
          example = {
            name: '',
            description: '',
            requests: [],
            responses: []
          };
          examples.push(example);
        }
        if (!isEmptyMessage(request)) {
          example.requests.push(request);
        }
        if (!sameResponse) {
          example.responses.push(response);
        }
      }
    }
    return examples;
  };

  getRequestMethod = function(actionElement) {
    var i, len, method, ref, requestElement;
    ref = query(actionElement, {
      element: 'httpRequest'
    });
    for (i = 0, len = ref.length; i < len; i++) {
      requestElement = ref[i];
      method = requestElement.attributes.method.content;
      if (method) {
        return method;
      }
    }
    return '';
  };

  getParameters = function(actionElement, resourceElement) {
    var actionParams, enumValue, example, hrefVariable, hrefVariables, i, len, parameter, parameters, ref, ref1, ref2, ref3, ref4, ref5, requiredElement, resourceParams, valueElement, values;
    parameters = [];
    resourceParams = ((ref = resourceElement.attributes) != null ? (ref1 = ref.hrefVariables) != null ? ref1.content : void 0 : void 0) || [];
    actionParams = ((ref2 = actionElement.attributes) != null ? (ref3 = ref2.hrefVariables) != null ? ref3.content : void 0 : void 0) || [];
    hrefVariables = resourceParams.concat(actionParams);
    for (i = 0, len = hrefVariables.length; i < len; i++) {
      hrefVariable = hrefVariables[i];
      requiredElement = query(hrefVariable.attributes.typeAttributes, {
        content: 'required'
      });
      valueElement = hrefVariable.content.value;
      switch (valueElement.element) {
        case 'enum':
          values = (function() {
            var j, len1, ref4, results1;
            ref4 = valueElement.attributes.enumerations.content;
            results1 = [];
            for (j = 0, len1 = ref4.length; j < len1; j++) {
              enumValue = ref4[j];
              results1.push({
                value: enumValue.content
              });
            }
            return results1;
          })();
          example = valueElement.content.content;
          break;
        default:
          values = [];
          example = valueElement.content;
      }
      parameter = {
        name: hrefVariable.content.key.content,
        description: ((ref4 = hrefVariable.meta.description) != null ? ref4.content : void 0) || '',
        type: (ref5 = hrefVariable.meta.title) != null ? ref5.content : void 0,
        required: requiredElement.length > 0,
        example: example,
        values: values
      };
      parameters.push(parameter);
    }
    return parameters;
  };

  getActions = function(resourceElement, slugCache, parentId) {
    var action, actionElement, actions, copy, example, examples, hasRequest, href, i, id, j, len, len1, method, ref, ref1, ref2, slugify, title, uriTemplate;
    slugify = slug.bind(slug, slugCache);
    actions = [];
    ref = query(resourceElement, {
      element: 'transition'
    });
    for (i = 0, len = ref.length; i < len; i++) {
      actionElement = ref[i];
      title = actionElement.meta.title.content;
      method = getRequestMethod(actionElement);
      examples = getExamples(actionElement);
      for (j = 0, len1 = examples.length; j < len1; j++) {
        example = examples[j];
        hasRequest = example.requests.length > 0;
        if (hasRequest) {
          break;
        }
      }
      ref1 = query(actionElement, {
        element: 'copy'
      }), copy = ref1[ref1.length - 1];
      id = slugify(parentId + "-" + method, true);
      action = {
        name: title,
        description: copy != null ? copy.content : void 0,
        elementId: id,
        elementLink: "#" + id,
        method: method,
        methodLower: method.toLowerCase(),
        hasRequest: (hasRequest != null) || false,
        examples: examples
      };
      action.parameters = getParameters(actionElement, resourceElement);
      href = ((ref2 = actionElement.attributes) != null ? ref2.href : void 0) || resourceElement.attributes.href || {};
      uriTemplate = href.content || '';
      action.uriTemplate = modifyUriTemplate(uriTemplate, action.parameters);
      action.attributes = {
        urlTemplate: action.uriTemplate
      };
      action.colorizedUriTemplate = modifyUriTemplate(uriTemplate, action.parameters, true);
      actions.push(action);
    }
    return actions;
  };

  getDefaultResourceGroup = function(parseResult, slugCache) {
    var resourceElements, resources, result;
    result = query(parseResult, {
      element: 'category',
      meta: {
        classes: {
          content: [
            {
              content: 'api'
            }
          ]
        }
      },
      content: [
        {
          element: 'resource'
        }
      ]
    })[0];
    resourceElements = (result ? query(result, {
      element: 'resource'
    }) : void 0) || [];
    resources = getResources(resourceElements, slugCache, '');
    if (resources.length > 0) {
      return {
        name: '',
        elementId: '',
        elementLink: '',
        descriptionHtml: '',
        resources: resources
      };
    } else {
      return null;
    }
  };

  decorate = function(api, md, slugCache, verbose) {
    var action, dataStructure, dataStructures, defaultResourceGroup, err, example, i, item, j, knownParams, len, len1, meta, name, newParams, param, ref, ref1, resource, resourceGroup, results1, reversed, schema, slugify;
    slugify = slug.bind(slug, slugCache);
    api.name = getTitle(api);
    api.metadata = getMetadata(api);
    dataStructures = getDataStructures(api);
    if (verbose) {
      console.log("Known data structures: " + (Object.keys(dataStructures)));
    }
    api.description = getApiDescription(api);
    api.host = getHost(api);
    api.resourceGroups = getResourceGroups(api, slugCache, md);
    defaultResourceGroup = getDefaultResourceGroup(api, slugCache);
    if (api.description) {
      api.descriptionHtml = md.render(api.description);
      api.navItems = slugCache._nav;
      slugCache._nav = [];
    }
    ref = api.metadata || [];
    for (i = 0, len = ref.length; i < len; i++) {
      meta = ref[i];
      if (meta.name === 'HOST') {
        api.host = meta.value;
      }
    }
    ref1 = api.resourceGroups || [];
    results1 = [];
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      resourceGroup = ref1[j];
      resourceGroup.elementId = slugify(resourceGroup.name, true);
      resourceGroup.elementLink = "#" + resourceGroup.elementId;
      if (resourceGroup.description) {
        resourceGroup.descriptionHtml = md.render(resourceGroup.description);
        resourceGroup.navItems = slugCache._nav;
        slugCache._nav = [];
      }
      results1.push((function() {
        var k, len2, ref2, results2;
        ref2 = resourceGroup.resources || [];
        results2 = [];
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          resource = ref2[k];
          resource.elementId = slugify(resourceGroup.name + "-" + resource.name, true);
          resource.elementLink = "#" + resource.elementId;
          results2.push((function() {
            var l, len3, len4, m, ref3, results3;
            ref3 = resource.actions || [];
            results3 = [];
            for (l = 0, len3 = ref3.length; l < len3; l++) {
              action = ref3[l];
              action.elementId = slugify(resourceGroup.name + "-" + resource.name + "-" + action.method, true);
              action.elementLink = "#" + action.elementId;
              action.methodLower = action.method.toLowerCase();
              if (!(action.attributes || {}).uriTemplate) {
                if (!action.parameters || !action.parameters.length) {
                  action.parameters = resource.parameters;
                } else if (resource.parameters) {
                  action.parameters = resource.parameters.concat(action.parameters);
                }
              }
              knownParams = {};
              newParams = [];
              reversed = (action.parameters || []).concat([]).reverse();
              for (m = 0, len4 = reversed.length; m < len4; m++) {
                param = reversed[m];
                if (knownParams[param.name]) {
                  continue;
                }
                knownParams[param.name] = true;
                newParams.push(param);
              }
              action.parameters = newParams.reverse();
              action.uriTemplate = modifyUriTemplate((action.attributes || {}).uriTemplate || resource.uriTemplate || '', action.parameters);
              action.colorizedUriTemplate = modifyUriTemplate((action.attributes || {}).uriTemplate || resource.uriTemplate || '', action.parameters, true);
              action.hasRequest = false;
              action.requestAttributes = [];
              action.hasResponse = false;
              action.responseAttributes = [];
              results3.push((function() {
                var len5, n, ref4, results4;
                ref4 = action.examples || [];
                results4 = [];
                for (n = 0, len5 = ref4.length; n < len5; n++) {
                  example = ref4[n];
                  results4.push((function() {
                    var len6, o, ref5, results5;
                    ref5 = ['requests', 'responses'];
                    results5 = [];
                    for (o = 0, len6 = ref5.length; o < len6; o++) {
                      name = ref5[o];
                      results5.push((function() {
                        var len10, len11, len7, len8, len9, p, q, r, ref10, ref6, ref7, ref8, ref9, results6, s, t;
                        ref6 = example[name] || [];
                        results6 = [];
                        for (p = 0, len7 = ref6.length; p < len7; p++) {
                          item = ref6[p];
                          if (name === 'requests' && !action.hasRequest) {
                            if (item.content) {
                              ref7 = item.content;
                              for (q = 0, len8 = ref7.length; q < len8; q++) {
                                dataStructure = ref7[q];
                                if (dataStructure.element === 'dataStructure') {
                                  try {
                                    action.requestAttributes = renderAttributes(dataStructure.content[0], dataStructures).properties;
                                  } catch (error) {
                                    err = error;
                                    if (verbose) {
                                      console.log(dataStructure.content[0]);
                                      console.log(err);
                                    }
                                  }
                                }
                              }
                            }
                            action.hasRequest = true;
                          }
                          if (name === 'responses' && !action.hasResponse) {
                            if (item.content) {
                              ref8 = item.content;
                              for (r = 0, len9 = ref8.length; r < len9; r++) {
                                dataStructure = ref8[r];
                                if (dataStructure.element === 'dataStructure') {
                                  try {
                                    action.responseAttributes = renderAttributes(dataStructure.content[0], dataStructures).properties;
                                  } catch (error) {
                                    err = error;
                                    if (verbose) {
                                      console.log(dataStructure.content[0]);
                                      console.log(err);
                                    }
                                  }
                                }
                              }
                            }
                            action.hasResponse = true;
                          }
                          if (!item.schema && item.content) {
                            ref9 = item.content;
                            for (s = 0, len10 = ref9.length; s < len10; s++) {
                              dataStructure = ref9[s];
                              if (dataStructure.element === 'dataStructure') {
                                try {
                                  schema = renderSchema(dataStructure.content[0], dataStructures);
                                  schema['$schema'] = 'http://json-schema.org/draft-04/schema#';
                                  item.schema = JSON.stringify(schema, null, 2);
                                } catch (error) {
                                  err = error;
                                  if (verbose) {
                                    console.log(JSON.stringify(dataStructure.content[0], null, 2));
                                    console.log(err);
                                  }
                                }
                              }
                            }
                          }
                          if (item.content && !process.env.DRAFTER_EXAMPLES) {
                            ref10 = item.content;
                            for (t = 0, len11 = ref10.length; t < len11; t++) {
                              dataStructure = ref10[t];
                              if (dataStructure.element === 'dataStructure') {
                                try {
                                  item.body = JSON.stringify(renderExample(dataStructure.content[0], dataStructures), null, 2);
                                } catch (error) {
                                  err = error;
                                  if (verbose) {
                                    console.log(JSON.stringify(dataStructure.content[0], null, 2));
                                    console.log(err);
                                  }
                                }
                              }
                            }
                          }
                          item.hasContent = item.description || Object.keys(item.headers).length || item.body || item.schema;
                          try {
                            if (item.body) {
                              item.body = JSON.stringify(JSON.parse(item.body), null, 2);
                            }
                            if (item.schema) {
                              results6.push(item.schema = JSON.stringify(JSON.parse(item.schema), null, 2));
                            } else {
                              results6.push(void 0);
                            }
                          } catch (error) {
                            err = error;
                            results6.push(false);
                          }
                        }
                        return results6;
                      })());
                    }
                    return results5;
                  })());
                }
                return results4;
              })());
            }
            return results3;
          })());
        }
        return results2;
      })());
    }
    return results1;
  };

  exports.getConfig = function() {
    return {
      formats: ['1A'],
      options: [
        {
          name: 'variables',
          description: 'Color scheme name or path to custom variables',
          "default": 'default'
        }, {
          name: 'condense-nav',
          description: 'Condense navigation links',
          boolean: true,
          "default": true
        }, {
          name: 'full-width',
          description: 'Use full window width',
          boolean: true,
          "default": false
        }, {
          name: 'template',
          description: 'Template name or path to custom template',
          "default": 'default'
        }, {
          name: 'style',
          description: 'Layout style name or path to custom stylesheet'
        }, {
          name: 'emoji',
          description: 'Enable support for emoticons',
          boolean: true,
          "default": true
        }
      ]
    };
  };

  exports.render = function(input, options, done) {
    var md, slugCache, themeStyle, themeVariables, verbose;
    if (done == null) {
      done = options;
      options = {};
    }
    if (process.env.NOCACHE) {
      cache = {};
    }
    if (options.condenseNav) {
      options.themeCondenseNav = options.condenseNav;
    }
    if (options.fullWidth) {
      options.themeFullWidth = options.fullWidth;
    }
    if (options.themeVariables == null) {
      options.themeVariables = 'default';
    }
    if (options.themeStyle == null) {
      options.themeStyle = 'default';
    }
    if (options.themeTemplate == null) {
      options.themeTemplate = 'default';
    }
    if (options.themeCondenseNav == null) {
      options.themeCondenseNav = true;
    }
    if (options.themeFullWidth == null) {
      options.themeFullWidth = false;
    }
    if (options.themeTemplate === 'default') {
      options.themeTemplate = path.join(ROOT, 'templates', 'index.jade');
    }
    slugCache = {
      _nav: []
    };
    md = markdownIt({
      html: true,
      linkify: true,
      typographer: true,
      highlight: highlight
    }).use(require('markdown-it-anchor'), {
      slugify: function(value) {
        var output;
        output = "header-" + (slug(slugCache, value, true));
        slugCache._nav.push([value, "#" + output]);
        return output;
      },
      permalink: true,
      permalinkClass: 'permalink'
    }).use(require('markdown-it-checkbox')).use(require('markdown-it-container'), 'note').use(require('markdown-it-container'), 'warning');
    if (options.themeEmoji) {
      md.use(require('markdown-it-emoji'));
    }
    md.renderer.rules.code_block = md.renderer.rules.fence;
    benchmark.start('decorate');
    decorate(input, md, slugCache, options.verbose);
    benchmark.end('decorate');
    benchmark.start('css-total');
    themeVariables = options.themeVariables, themeStyle = options.themeStyle, verbose = options.verbose;
    return getCss(themeVariables, themeStyle, verbose, function(err, css) {
      var key, locals, ref, value;
      if (err) {
        return done(errMsg('Could not get CSS', err));
      }
      benchmark.end('css-total');
      locals = {
        api: input,
        condenseNav: options.themeCondenseNav,
        css: css,
        fullWidth: options.themeFullWidth,
        date: moment,
        hash: function(value) {
          return crypto.createHash('md5').update(value.toString()).digest('hex');
        },
        highlight: highlight,
        markdown: function(content) {
          return md.render(content);
        },
        slug: slug.bind(slug, slugCache),
        urldec: function(value) {
          return querystring.unescape(value);
        }
      };
      ref = options.locals || {};
      for (key in ref) {
        value = ref[key];
        locals[key] = value;
      }
      benchmark.start('get-template');
      return getTemplate(options.themeTemplate, verbose, function(getTemplateErr, renderer) {
        var html;
        if (getTemplateErr) {
          return done(errMsg('Could not get template', getTemplateErr));
        }
        benchmark.end('get-template');
        benchmark.start('call-template');
        try {
          html = renderer(locals);
        } catch (error) {
          err = error;
          return done(errMsg('Error calling template during rendering', err));
        }
        benchmark.end('call-template');
        return done(null, html);
      });
    });
  };

}).call(this);
